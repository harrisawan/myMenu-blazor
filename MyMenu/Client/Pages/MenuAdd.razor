@page "/menuadd/{companyid}"
@layout AdminLayout
@inject ISnackbar Snackbar
@inject IDialogService Dialog
@inject IMenuService menuService
@inject IItemService itemService
@inject IDiscountService discountService
@inject ICategoryService categoryService
@inject IMyService myService
@using MudBlazor.Services

<MudTabs Elevation="0" @ref="tabs" Rounded="true" Centered="true">
    <MudTabPanel Text="Item One" Style="display: none">
        <MudContainer>
            <MudPaper Class="d-flex justify-end py-2 px-1 mt-6" Elevation="0">
                <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@MenuOpenDialog">New Menu</MudButton>
                <MudButton Variant="Variant.Outlined" Class="ml-1" StartIcon="@Icons.Material.Filled.ArrowForward" Color="Color.Primary" OnClick="() => Activate(1)">Category</MudButton>
            </MudPaper>
            @if (menusList != null)
            {
                <MudTable Items="@menusList" Hover="true" Dense="true" Filter="new Func<Menu, bool>(FilterFunc)" SortLabel="Sort By" @bind-SelectedItem="@menuselectedItem">
                    <ToolBarContent>
                        <MudText Typo="Typo.h5" Color="Color.Primary">MENU LIST</MudText>
                        <MudToolBarSpacer />
                        <MudTextField @bind-Value="menusearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <ColGroup>
                        <col style="width:10%;" />
                        <col style="width:10%;" />
                        <col style="width:20%" />
                        <col style="width:40%;" />
                        <col style="width:20%;" />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<Menu,object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
                        <MudTh>Logo</MudTh>
                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Menu,object>(x=>x.Name)">Menu Name</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Menu,object>(x=>x.Description)">Description</MudTableSortLabel></MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@context.Id</MudTd>
                        <MudTd DataLabel="Logo">
                            <img src="@ConvertImageToDisplay(context.ImgUrl)" style="width:50px;height:50px;" />
                        </MudTd>
                        <MudTd DataLabel="Menu Name">@context.Name</MudTd>
                        <MudTd DataLabel="Description">@context.Description</MudTd>
                        <MudTd DataLabel="Action">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" OnClick="OpenEditDialog" Class="ma-2"></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="DeleteMenuHandler" Size="Size.Medium" Class="ma-2"></MudIconButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }

            <MudDialog @bind-IsVisible="menuDialogVisible">
                <TitleContent>
                    @if (menuselectedItem == null)
                    {
                        <MudText Typo="Typo.h6">
                            Add Menu
                        </MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.h6">
                            Update Menu
                        </MudText>
                    }
                </TitleContent>
                <DialogContent>
                    <EditForm Model="menuViewModel" OnValidSubmit="AddNewMenuHandler">
                        <MudGrid>
                            <MudItem xs="12" md="6">
                                <div>
                                    <div class="d-block pa-2">
                                        @if (imageUploaded != null)
                                        {
                                            <img src="@ConvertImageToDisplay(imageUploaded)" style="width:80px;height:80px;border:1px solid black;" />
                                        }
                                    </div>
                                    <div class="d-block py-2 pr-2">
                                        <MudButton HtmlTag="label"
                                                   Variant="Variant.Filled"
                                                   Color="Color.Primary"
                                                   StartIcon="@Icons.Filled.Image"
                                                   for="fileInputMenu">
                                            Upload image
                                        </MudButton>
                                        <InputFile id="fileInputMenu" OnChange="HandleSelection" hidden />
                                        <p><b>@status</b></p>
                                    </div>
                                </div>
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudTextField T="string" Label="Resturant Name" @bind-Value="@menuViewModel.Name" Required="true" RequiredError="Resturant Name is required!" />
                                <MudTextField T="string" Label="Description" @bind-Value="@menuViewModel.Description" Required="true" RequiredError="Moto is required!" />
                            </MudItem>
                            <MudItem xs="12" md="6"></MudItem>
                            <MudItem xs="12" md="6">
                                <MudCheckBox T="bool" Required="true" @bind-Checked="@menuViewModel.IsActive" RequiredError="You must agree" Color="Color.Primary" Class="ml-n2"
                                             Label="Enabled" />
                            </MudItem>
                        </MudGrid>
                    </EditForm>
                </DialogContent>
                <DialogActions>

                    @if (menuselectedItem == null)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddNewMenuHandler" Class="px-10">Save</MudButton>
                        <MudButton Variant="Variant.Filled" OnClick="ResetMenuForm" Color="Color.Primary" Class="px-10">Clear</MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" OnClick="UpdateMenuHandler" Color="Color.Primary" Class="px-10">Update</MudButton>
                        <MudButton Variant="Variant.Filled" OnClick="ResetMenuForm" Color="Color.Primary" Class="px-10">Clear</MudButton>
                    }
                </DialogActions>
            </MudDialog>
        </MudContainer>
    </MudTabPanel>
    <MudTabPanel Text="Item Two" Style="display: none">
        <MudContainer>
            <MudPaper Class="d-flex justify-end py-2 px-1 mt-6" Elevation="0">
                <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@CategoryOpenDialog">New Category</MudButton>
                <MudButton Variant="Variant.Outlined" Class="ml-1" StartIcon="@Icons.Material.Filled.ArrowForward" Color="Color.Primary" OnClick="() => Activate(2)">Item</MudButton>
            </MudPaper>
            @if (categoryList != null)
            {
                <MudTable Items="@categoryList" Hover="true" Dense="true" Filter="new Func<Category, bool>(CategoryFilterFunc)" SortLabel="Sort By" @bind-SelectedItem="@categoryselectedItem">
                    <ToolBarContent>
                        <MudText Typo="Typo.h5" Color="Color.Primary">CATEGORY LIST</MudText>
                        <MudToolBarSpacer />
                        <MudTextField @bind-Value="categorysearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <ColGroup>
                        <col style="width:10%;" />
                        <col style="width:20%" />
                        <col style="width:50%;" />
                        <col style="width:20%;" />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<Category,object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Category,object>(x=>x.Name)">Category Name</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Category,object>(x=>x.Description)">Description</MudTableSortLabel></MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@context.Id</MudTd>
                        <MudTd DataLabel="Category Name">@context.Name</MudTd>
                        <MudTd DataLabel="Description">@context.Description</MudTd>
                        <MudTd DataLabel="Action">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" OnClick="OpenCategoryEditDialog" Class="ma-2"></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="DeleteCategoryHandler" Class="ma-2"></MudIconButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
            <MudDialog @bind-IsVisible="categoryDialogVisible">
                <TitleContent>
                    @if (categoryselectedItem == null)
                    {
                        <MudText Typo="Typo.h6">
                            Add Category
                        </MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.h6">
                            Update Category
                        </MudText>
                    }
                    <MudText Typo="Typo.h6">

                    </MudText>
                </TitleContent>
                <DialogContent>
                    <EditForm Model="categoryViewModel" OnValidSubmit="AddNewCategoryHandler">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudSelect T="string" Label="Select Menu" @bind-Value="@Menudropdownvalue">
                                    @foreach (var list in menusList)
                                    {
                                        <MudSelectItem Value="@list.Id.ToString()">@list.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField T="string" Label="Category Name" @bind-Value="@categoryViewModel.Name" Required="true" RequiredError="Category Name is required!" />
                                <MudTextField T="string" Label="Description" @bind-Value="@categoryViewModel.Description" Required="true" RequiredError="Company Moto is required!" Variant="Variant.Text" Lines="5" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudCheckBox T="bool" Required="true" @bind-Checked="@categoryViewModel.IsActive" RequiredError="You must agree" Color="Color.Primary" Class="ml-n2"
                                             Label="Enabled" />
                            </MudItem>
                        </MudGrid>
                    </EditForm>
                </DialogContent>
                <DialogActions>
                    @if (categoryselectedItem == null)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddNewCategoryHandler" Class="px-10">Save</MudButton>
                        <MudButton Variant="Variant.Filled" OnClick="ResetCategoryForm" Color="Color.Primary" Class="px-10">Clear</MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" OnClick="UpdateCategoryHandler" Color="Color.Primary" Class="px-10">Update</MudButton>
                        <MudButton Variant="Variant.Filled" OnClick="ResetCategoryForm" Color="Color.Primary" Class="px-10">Clear</MudButton>
                    }

                </DialogActions>
            </MudDialog>
        </MudContainer>
    </MudTabPanel>
    <MudTabPanel Text="Item Three" Style="display: none">
        <MudContainer>
            <MudPaper Class="d-flex justify-end py-2 px-1 mt-6" Elevation="0">
                <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@ItemOpenDialog">New Item</MudButton>
            </MudPaper>
            @if (itemList != null)
            {
                <MudTable Items="@itemList" Hover="true" Dense="true" Filter="new Func<Item, bool>(ItemFilterFunc)" SortLabel="Sort By" @bind-SelectedItem="@itemselectedItem">
                    <ToolBarContent>
                        <MudText Typo="Typo.h5" Color="Color.Primary">ITEM LIST</MudText>
                        <MudToolBarSpacer />
                        <MudTextField @bind-Value="itemsearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <ColGroup>
                        <col style="width:10%;" />
                        <col style="width:10%;" />
                        <col style="width:20%" />
                        <col style="width:40%;" />
                        <col style="width:20%;" />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<Item, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
                        <MudTh>Logo</MudTh>
                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Item, object>(x=>x.Name)">Item Name</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Item,object>(x=>x.Description)">Description</MudTableSortLabel></MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@context.Id</MudTd>
                        <MudTd DataLabel="Logo">
                            <img src="@ConvertImageToDisplay(context.ImgUrl)" style="width:50px;height:50px;" />
                        </MudTd>
                        <MudTd DataLabel="Item Name">@context.Name</MudTd>
                        <MudTd DataLabel="Description">@context.Description</MudTd>
                        <MudTd DataLabel="Action">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" OnClick="OpenItemEditDialog" Class="ma-2"></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="DeleteItemHandler" Class="ma-2"></MudIconButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }

            <MudDialog @bind-IsVisible="itemDialogVisible">
                <TitleContent>
                    @if (itemselectedItem == null)
                    {
                        <MudText Typo="Typo.h6">
                            Add Item
                        </MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.h6">
                            Update Item
                        </MudText>
                    }
                </TitleContent>
                <DialogContent>
                    <MudContainer Style="max-height: 400px; overflow-y: scroll">
                        <EditForm Model="itemViewModel" OnValidSubmit="AddNewCategoryHandler">
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudSelect T="string" Label="Select Menu" @bind-Value="@Categorydropdownvalue">
                                        @foreach (var list in categoryList)
                                        {
                                            <MudSelectItem Value="@list.Id.ToString()">@list.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <div>
                                        <div class="d-block pa-2">
                                            @if (imageUploaded != null)
                                            {
                                                <img src="@ConvertImageToDisplay(imageUploaded)" style="width:80px;height:80px;border:1px solid black;" />
                                            }
                                        </div>
                                        <div class="d-block py-2 pr-2">
                                            <MudButton HtmlTag="label"
                                                       Variant="Variant.Filled"
                                                       Color="Color.Primary"
                                                       StartIcon="@Icons.Filled.Image"
                                                       for="fileInputItem">
                                                Image
                                            </MudButton>
                                            <InputFile id="fileInputItem" OnChange="HandleSelection" hidden />
                                            <p><b>@status</b></p>
                                        </div>
                                    </div>
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField T="string" Label="Item Name" @bind-Value="@itemViewModel.Name" Required="true" RequiredError="Item Name is required!" />
                                    <MudTextField T="string" Label="Description" @bind-Value="@itemViewModel.Description" Required="true" RequiredError="Item is required!" Variant="Variant.Text" Lines="5" />
                                </MudItem>
                                <MudItem xs="12" md="6"></MudItem>
                                <MudItem xs="12" md="6">
                                    <MudCheckBox T="bool" Required="true" @bind-Checked="@itemViewModel.IsActive" RequiredError="You must agree" Color="Color.Primary" Class="ml-n2"
                                                 Label="Enabled" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudTextField T="decimal" Label="Price" @bind-Value="@itemViewModel.Price" Required="true" RequiredError="Price is required!" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudTextField T="decimal" @bind-Value="@itemViewModel.PriceWithDiscount" Label="Discount Price" Required="true" RequiredError="Discount Price is required!" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudPaper Class="pa-4" Elevation="0">
                                        <b>Available Discounts:</b>
                                        <MudSelect T="string" Label="Select Discount" @bind-Value="@Discountdropdownvalue">
                                            @foreach (var list in discountList)
                                            {
                                                <MudSelectItem Value="@list.Id.ToString()"> @list.Name</MudSelectItem>
                                            }
                                        </MudSelect>
                                        @{
                                            discounturl = "/newdiscount/" + CompanyId;
                                        }
                                        <MudLink Href=@discounturl>Add New Discount</MudLink>
                                    </MudPaper>
                                </MudItem>
                            </MudGrid>
                        </EditForm>
                    </MudContainer>
                </DialogContent>
                <DialogActions>
                    @if (itemselectedItem == null)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddNewItemHandler" Class="px-10">Save</MudButton>
                        <MudButton Variant="Variant.Filled" OnClick="ResetItemForm" Color="Color.Primary" Class="px-10">Clear</MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" OnClick="UpdateItemHandler" Color="Color.Primary" Class="px-10">Update</MudButton>
                        <MudButton Variant="Variant.Filled" OnClick="ResetItemForm" Color="Color.Primary" Class="px-10">Clear</MudButton>
                    }
                </DialogActions>
            </MudDialog>
        </MudContainer>
    </MudTabPanel>
</MudTabs>

@code {
    [Parameter]
    public string CompanyId { get; set; }
    [CascadingParameter]
    public AdminLayout Layout { get; set; }
    private List<Menu> menusList { get; set; } = new List<Menu>();
    private List<Category> categoryList { get; set; } = new List<Category>();
    private List<Item> itemList { get; set; } = new List<Item>();
    private List<DiscountPeriods> discountList { get; set; } = new List<DiscountPeriods>();
    private MenuViewModel menuViewModel { get; set; } = new MenuViewModel();
    private CategoryViewModel categoryViewModel { get; set; } = new CategoryViewModel();
    private ItemViewModel itemViewModel { get; set; } = new ItemViewModel();
    string status;
    string discounturl;
    public byte[] imageUploaded { get; set; }
    public string Menudropdownvalue { get; set; }
    public string Categorydropdownvalue { get; set; }
    public string Discountdropdownvalue { get; set; }
    private IFileListEntry file { get; set; }

    protected override async Task OnInitializedAsync()
    {
        menusList = (await menuService.GetAllMenuByCompanyId(CompanyId)).ToList();
        categoryList = (await categoryService.GetAllCategoryByCompanyId(CompanyId)).ToList();
        itemList = (await itemService.GetAllItemByCompanyId(CompanyId)).ToList();
        discountList = (await discountService.GetAllDiscountByCompanyId(CompanyId)).ToList();
        menuViewModel.IsActive = false;
        categoryViewModel.IsActive = false;
        itemViewModel.IsActive = false;
        Layout.Cid = CompanyId;
        myService.CallRequestRefresh();
    }

    private bool dense = false;
    private bool hover = true;
    private bool ronly = false;
    private Menu menuselectedItem = null;
    private Category categoryselectedItem = null;
    private Item itemselectedItem = null;
    private string menusearchString = "";
    private string categorysearchString = "";
    private string itemsearchString = "";

    // Dialog Box
    private bool menuDialogVisible;
    private bool categoryDialogVisible;
    private bool itemDialogVisible;
    private int rating;
    private void MenuOpenDialog()
    {
        menuselectedItem = null;
        menuViewModel = new MenuViewModel();
        menuDialogVisible = true;
    }
    void MenuDialogClose() => menuDialogVisible = false;

    private void CategoryOpenDialog()
    {
        categoryselectedItem = null;
        categoryViewModel = new CategoryViewModel();
        Menudropdownvalue = null;
        categoryDialogVisible = true;
    }
    void CategoryDialogClose() => categoryDialogVisible = false;

    private void ItemOpenDialog()
    {
        itemViewModel = new ItemViewModel();
        Categorydropdownvalue = null;
        Discountdropdownvalue = null;
        itemDialogVisible = true;
    }
    void ItemDialogClose() => itemDialogVisible = false;

    MudListItem discountSelectedItem;
    MudTabs tabs;

    private bool FilterFunc(Menu m)
    {
        if (string.IsNullOrWhiteSpace(menusearchString))
            return true;
        if (m.Name.Contains(menusearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    private bool CategoryFilterFunc(Category c)
    {
        if (string.IsNullOrWhiteSpace(categorysearchString))
            return true;
        if (c.Name.Contains(categorysearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    private bool ItemFilterFunc(Item i)
    {
        if (string.IsNullOrWhiteSpace(itemsearchString))
            return true;
        if (i.Name.Contains(itemsearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    void Activate(int index)
    {
        tabs.ActivatePanel(index);
    }




    //add
    private async void AddNewMenuHandler()
    {
        menuViewModel.CompanyId = int.Parse(CompanyId);
        menuViewModel.ImgUrl = imageUploaded;
        var res = (await menuService.AddNewMenu(menuViewModel));
        menusList = (await menuService.GetAllMenuByCompanyId(CompanyId)).ToList();
        menusList = (await menuService.GetAllMenuByCompanyId(CompanyId)).ToList();
        Snackbar.Add("Menu added successfully");
    }
    private async void AddNewCategoryHandler()
    {
        categoryViewModel.CompanyId = int.Parse(CompanyId);
        categoryViewModel.MenuId = int.Parse(Menudropdownvalue);
        var res = (await categoryService.AddNewCategory(categoryViewModel));
        categoryList = (await categoryService.GetAllCategoryByCompanyId(CompanyId)).ToList();
        Snackbar.Add("Category added successfully");
    }
    private async void AddNewItemHandler()
    {
        itemViewModel.CompanyId = int.Parse(CompanyId);
        itemViewModel.CategoryId = int.Parse(Categorydropdownvalue);
        itemViewModel.DiscountId = int.Parse(Discountdropdownvalue);
        itemViewModel.ImgUrl = imageUploaded;
        await itemService.AddNewItem(itemViewModel);
        itemList = (await itemService.GetAllItemByCompanyId(CompanyId)).ToList();
        Snackbar.Add("Item added successfully");
    }


    //image
    async Task HandleSelection(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            status = $"Finished loading {file.Size} bytes from {file.Name}";
            imageUploaded = ms.ToArray();
        }
    }
    private string ConvertImageToDisplay(byte[] image)
    {
        if (image != null)
        {
            var base64 = Convert.ToBase64String(image);
            var fs = string.Format("data:image/jgp;base64,{0}", base64);
            return fs;
        }
        return "";
    }




    //delete
    public async Task DeleteMenuHandler()
    {
        if (menuselectedItem != null)
        {
            await menuService.DeleteMenu(menuselectedItem.Id);
            Snackbar.Add("Record Deleted");
            menusList = (await menuService.GetAllMenuByCompanyId(CompanyId)).ToList();
            categoryList = (await categoryService.GetAllCategoryByCompanyId(CompanyId)).ToList();
            itemList = (await itemService.GetAllItemByCompanyId(CompanyId)).ToList();
        }
        else
        {
            Snackbar.Add("Firstly! Click On Desired Row");
        }
    }
    public async Task DeleteCategoryHandler()
    {
        if (categoryselectedItem != null)
        {
            await categoryService.DeleteCategory(categoryselectedItem.Id);
            categoryList = (await categoryService.GetAllCategoryByCompanyId(CompanyId)).ToList();
            itemList = (await itemService.GetAllItemByCompanyId(CompanyId)).ToList();
            Snackbar.Add("Record Deleted");
        }
        else
        {
            Snackbar.Add("Firstly! Click On Desired Row");
        }
    }
    public async Task DeleteItemHandler()
    {
        if (itemselectedItem != null)
        {
            await itemService.DeleteItem(itemselectedItem.Id);
            Snackbar.Add("Record Deleted");
            itemList = (await itemService.GetAllItemByCompanyId(CompanyId)).ToList();
        }
        else
        {
            Snackbar.Add("Firstly! Click On Desired Row");
        }
    }



    //Edit Dialog
    private async Task OpenEditDialog()
    {
        if (menuselectedItem != null)
        {
            var result = await menuService.GetMenuById(menuselectedItem.Id);
            menuViewModel = new MenuViewModel();
            menuViewModel.Name = result.Name;
            menuViewModel.Description = result.Description;
            imageUploaded = result.ImgUrl;
            menuViewModel.IsActive = result.IsActive;
            menuDialogVisible = true;
        }
        else
        {
            Snackbar.Add("Firstly! Click On Desired Row");
        }
    }
    private async Task OpenCategoryEditDialog()
    {
        if (categoryselectedItem != null)
        {
            var result = await categoryService.GetCategoryById(categoryselectedItem.Id);
            categoryViewModel = new CategoryViewModel();
            categoryViewModel.Name = result.Name;
            Menudropdownvalue = result.MenuId.ToString();
            categoryViewModel.Description = result.Description;
            categoryViewModel.IsActive = result.IsActive;
            categoryDialogVisible = true;
        }
        else
        {
            Snackbar.Add("Firstly! Click On Desired Row");
        }
    }
    private async Task OpenItemEditDialog()
    {
        if (itemselectedItem != null)
        {
            var result = await itemService.GetItemById(itemselectedItem.Id);
            itemViewModel = new ItemViewModel();
            itemViewModel.Name = result.Name;
            Categorydropdownvalue = result.CategoryId.ToString();
            Discountdropdownvalue = result.DiscountId.ToString();
            itemViewModel.Description = result.Description;
            imageUploaded = result.ImgUrl;
            itemViewModel.IsActive = result.IsActive;
            itemViewModel.Price = result.Price;
            itemViewModel.PriceWithDiscount = result.PriceWithDiscount;
            itemDialogVisible = true;
        }
        else
        {
            Snackbar.Add("Firstly! Click On Desired Row");
        }
    }



    //Edit
    private async void UpdateMenuHandler()
    {
        menuViewModel.CompanyId = int.Parse(CompanyId);
        if (imageUploaded != null)
        {
            menuViewModel.ImgUrl = imageUploaded;
        }
        var res = (await menuService.UpdateMenu(menuViewModel, menuselectedItem.Id));
        menusList = (await menuService.GetAllMenuByCompanyId(CompanyId)).ToList();
        Snackbar.Add("Menu Updated successfully");
    }
    private async void UpdateCategoryHandler()
    {
        categoryViewModel.CompanyId = int.Parse(CompanyId);
        categoryViewModel.MenuId = int.Parse(Menudropdownvalue);
        var res = (await categoryService.UpdateCategory(categoryViewModel, categoryselectedItem.Id));
        categoryList = (await categoryService.GetAllCategoryByCompanyId(CompanyId)).ToList();
        Snackbar.Add("Category Updated successfully");
    }
    private async void UpdateItemHandler()
    {
        itemViewModel.CompanyId = int.Parse(CompanyId);
        itemViewModel.CategoryId = int.Parse(Categorydropdownvalue);
        itemViewModel.DiscountId = int.Parse(Discountdropdownvalue);
        if (imageUploaded != null)
        {
            itemViewModel.ImgUrl = imageUploaded;
        }
        await itemService.UpdateItem(itemViewModel, itemselectedItem.Id);
        itemList = (await itemService.GetAllItemByCompanyId(CompanyId)).ToList();
        Snackbar.Add("Item Updated successfully");
    }



    private void ResetMenuForm()
    {
        status = "";
        file = null;
        imageUploaded = null;
        menuViewModel.Name = null;
        menuViewModel.Description = null;
        menuViewModel.IsActive = false;
        menuselectedItem = null;
        menuViewModel = new MenuViewModel();
    }
    private void ResetCategoryForm()
    {
        Menudropdownvalue = null;
        categoryViewModel.Name = null;
        categoryViewModel.Description = null;
        categoryViewModel.IsActive = false;
        categoryselectedItem = null;
        categoryViewModel = new CategoryViewModel();
    }
    private void ResetItemForm()
    {
        status = "";
        file = null;
        imageUploaded = null;
        itemViewModel.Name = null;
        itemViewModel.Description = null;
        itemViewModel.IsActive = false;
        Discountdropdownvalue = null;
        itemViewModel.Price = 0.0M;
        itemViewModel.PriceWithDiscount = 0.0M;
        itemselectedItem = null;
        Categorydropdownvalue = null;
        itemViewModel = new ItemViewModel();
    }
}
